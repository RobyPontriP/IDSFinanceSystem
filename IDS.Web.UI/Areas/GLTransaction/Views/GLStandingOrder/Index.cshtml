@model IEnumerable<IDS.GLTransaction.GLStandingOrderH>

@{
    ViewBag.Title = "Standing Order List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/Content/DataTables/datatables.css" />
    <link rel="stylesheet" href="~/Content/DataTables/DataTables-1.10.25/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" href="~/Content/DataTables/Select-1.3.3/css/select.bootstrap5.min.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/flatpickr/flatpickr.min.css" />
}


<div class="card">
    <div class="card-header">
        <h3 class="card-title">Filter</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group row mb-2">
                    @Html.Label("Branch Code", new { @class = "control-label col-sm-3 col-form-label" })
                    <div class="col-sm-9">
                        @Html.DropDownList("Branch", ViewData["BranchList"] as SelectList, "-- Select Branch --", new { @id = "cboBranchCode", @class = "form-control form-control-sm" })
                    </div>
                </div>
            </div>

            <div class="col-sm-5">
                <div class="form-group row mb-2">
                    @Html.Label("Date From", new { @class = "control-label col-form-label col-sm-2" })
                    <div class="col-sm-4">
                        @Html.TextBox("FromDate", ViewData["FirstDayOfMonth"], new { @id = "txtFromDate", @class = "form-control form-control-sm" })
                    </div>

                    @Html.Label("Date To", new { @class = "control-label col-form-label col-sm-2" })
                    <div class="col-sm-4">
                        @Html.TextBox("ToDate", ViewData["CurrDate"], new { @id = "txtToDate", @class = "form-control form-control-sm" })
                    </div>
                </div>
            </div>

            <div class="col-sm-2">
                <div class="form-check form-check-inline">
                    @Html.CheckBox("chkStartDate", true, new { @id = "chkStartDate", @class = "form-check-input" })
                    @Html.Label("chkStartDate", "Start Date", new { @class = "form-check-label" })
                </div>
                <div class="form-check form-check-inline">
                    @Html.CheckBox("chkExpiryDate", false, new { @id = "chkExpiryDate", @class = "form-check-input" })
                    @Html.Label("chkExpiryDate", "Expiry Date", new { @class = "form-check-label" })
                </div>
            </div>

            <div class="col-sm-1">
                <div class="col-sm-6 text-right">
                    <a class="btn btn-sm btn-default" onclick="Refresh()" title="Refresh Data">
                        <i class="fas fa-search"></i>
                    </a>
                </div>
            </div>
        </div>        
    </div>
</div>


<div class="row">
    <div class="col-sm-6 col-md-6 col-6">
        <h4>@ViewData["Title"]</h4>
    </div>
    <div class="col-sm-6 col-md-6 col-6 text-right">
        <p>
            @{
                if (Convert.ToInt32(ViewData["Page.Insert"]) == 1)
                {
                    <a href="#" class="btn btn-sm btn-primary" title="Input Standing Order" onclick="LoadCreateNewForm()">
                        <i class="fas fa-plus"></i>
                    </a>
                }
                else
                {
                    <a href="#" class="btn btn-sm btn-primary" title="Input Standing Order" onclick="NoAccess()">
                        <i class="fas fa-plus"></i>
                    </a>
                }

                if (Convert.ToInt32(ViewData["Page.Edit"]) == 1)
                {
                    <a class="btn btn-sm btn-info" title="Edit Standing Order" onclick="LoadEditForm()">
                        <i class="fas fa-edit"></i>
                    </a>
                }
                else
                {
                    <a class="btn btn-sm btn-info" title="Edit Standing Order" onclick="NoAccess()" disabled="disabled">
                        <i class="fas fa-edit"></i>
                    </a>
                }

                if (Convert.ToInt32(ViewData["Page.Delete"]) == 1)
                {
                    <a onclick="Delete()" title="Delete Standing Order" class="btn btn-sm btn-danger" href="#">
                        <i class="fas fa-trash"></i>
                    </a>
                }
                else
                {
                    <a onclick="Delete()" title="Delete Standing Order" class="btn btn-sm btn-danger" href="#">
                        <i class="fas fa-trash"></i>
                    </a>
                }
            }
        </p>
    </div>
</div>


<div class="table-responsive table-responsive-sm p-2 bg-white border">
    <table id="tableData" class="table table-bordered table-hover w-100">
        <thead>
            <tr class="align-top">
                <th valign="middle"></th>
                <th class="align-middle">SO No</th>
                <th class="align-middle">Start Date</th>
                <th class="align-middle">Expiry Date</th>
                <th class="align-middle">Exe. Day</th>
                <th class="align-middle">SO Exec</th>
                <th class="align-middle">SC</th>
                <th class="align-middle">Status Active</th>
                <th class="align-middle">Description</th>
                <th class="align-middle">Operator ID</th>
                <th class="align-middle">Last Update</th>
                <th class="align-middle">Branch</th>
            </tr>
        </thead>
    </table>
</div>


<div id="PartialSection">

</div>


@section Scripts {
    <script src="~/Scripts/moment.min.js"></script>
    <script type="text/javascript" src="~/Content/DataTables/datatables.min.js"></script>
    <script type="text/javascript" src="~/Content/DataTables/Select-1.3.3/js/select.bootstrap5.js"></script>
    <script src="~/Content/flatpickr/flatpickr.min.js"></script>
    <script src="~/Content/flatpickr/id.min.js"></script>

    <script type="text/javascript">
        flatpickr("#txtFromDate, #txtToDate", {
            dateFormat: "d/M/Y",
            static: true,
            disableMobile: true,
        });

        $("#chkStartDate").change(function () {
            if ($("#chkStartDate").is(":checked") == true) {
                $("#chkExpiryDate").prop('checked', false);

                if ($("#txtFromDate").val() == '') {
                    var d = new Date(),
                        currDate = ((d.getDate()) + '/' + (d.toLocaleString('en-us', { month: 'short' })) + '/' + d.getFullYear()),
                        firstDateOfMonth = (('1') + '/' + (d.toLocaleString('en-us', { month: 'short' })) + '/' + d.getFullYear());

                    $("#txtFromDate").val(firstDateOfMonth);
                    $("#txtToDate").val(currDate);
                }
            }
            else {
                if ($("#chkExpiryDate").is(":checked") == false) {
                    $("#txtFromDate").val('');
                    $("#txtToDate").val('');
                }
            }
        });

        $("#chkExpiryDate").change(function () {
            if ($("#chkExpiryDate").is(":checked") == true) {
                $("#chkStartDate").prop('checked', false);

                if ($("#txtFromDate").val() == '') {
                    var d = new Date(),
                        currDate = ((d.getDate()) + '/' + (d.toLocaleString('en-us', { month: 'short' })) + '/' + d.getFullYear()),
                        firstDateOfMonth = (('1') + '/' + (d.toLocaleString('en-us', { month: 'short' })) + '/' + d.getFullYear());

                    $("#txtFromDate").val(firstDateOfMonth);
                    $("#txtToDate").val(currDate);
                }
            }
            else {
                if ($("#chkStartDate").is(":checked") == false) {
                    $("#txtFromDate").val('');
                    $("#txtToDate").val('');
                }
            }
        });

        //$("#chkEntryDate").click(function () {
        //    if ($("#chkEntryDate").is(":checked") == true) {
        //        $("#chkTransDate").prop('checked', false);

        //        $("#txtFromDate").prop('readonly', false);
        //        $("#txtToDate").prop('readonly', false);
        //    }
        //    else {
        //        if ($("#txtFromDate").is(":checked") == true) {
        //            $("#txtFromDate").prop('readonly', false);
        //            $("#txtToDate").prop('readonly', false);
        //        }
        //        else {
        //            $("#txtFromDate").prop('readonly', true);
        //            $("#txtToDate").prop('readonly', true);
        //        }
        //    }
        //});

        var table = $('#tableData').DataTable
        ({
            "columnDefs": [
                {
                    "targets": 'no-sort',
                    "orderable": false,
                },
                {
                    "data": null,
                    "width": "20px",
                    "defaultContent": '',
                    "orderable": false,
                    "className": "select-checkbox",
                    "checkboxes": {
                        "selectRow": true
                    },
                    "targets": [0]
                },
                {
                    "orderable": true,
                    "targets": [1],
                    "width": "30px",
                },
                {
                    "width":"60px",
                    "orderable": "true",
                    "targets": [2,3]
                },
                {
                    "width": "40px",
                    "orderable": true,
                    "targets": [4,5,6]
                },
                {
                    "width": "30px",
                    "orderable": true,
                    "class": "text-center",
                    "targets": [7]
                },
                {
                    "width": "110px",
                    "orderable": true,
                    "targets": [8]
                },
                {
                    "width": "80px",
                    "orderable": true,
                    "targets": [9]
                },
                {
                    "width": "80px",
                    "orderable": true,
                    "targets": [10]
                },
                {
                    "width": "130px",
                    "orderable": true,
                    "visible": false,
                    "targets": [11]
                }
            ],
            "select": {
                "style": 'os'
            },
            "language":
            {
                "search": "",
                "searchPlaceholder": "Search...",
                "emptyTable": "No record found.",
                "processing": "<div class='overlay custom-loader-background'><i class='fa fa-cog fa-spin custom-loader-color'></i></div>"
            },
            "processing": "true",
            "order": [[1, "asc"]],
            "serverSide": "true",
            "lengthMenu": [[1, 10, 20, 50, 100, 1000, -1], [1, 10, 20, 50, 100, 1000, "All"]],
            "pageLength": 10,
            "ajax":
            {
                "url": '@Url.Action("GetData", "GLStandingOrder", new { Area = "GLTransaction" })',
                "type": "POST",
                "dataType": "JSON",
                "data": function (d) {
                    d.srcCode = $("#cboSourceCode").val(),
                    d.branchCode = $("#cboBranchCode").val(),
                    d.dateFrom = ($("#txtFromDate").val() == '' ? null : moment($("#txtFromDate").val(), 'DD/MMM/YYYY').format('YYYY-MM-DD')),
                    d.dateTo = ($("#txtToDate").val() == '' ? null : moment($("#txtToDate").val(), 'DD/MMM/YYYY').format('YYYY-MM-DD')),
                    d.dateType = GetDateType()
                }
            },
            "columns": [
                { "data": null },
                { "data": "Code", "name": "Code" },
                {
                    "data": "StartDate", "name": "StartDate",
                    "render": function (data, type, row, meta) {
                        return moment(row.StartDate).format('DD/MMM/YYYY');
                    }
                },
                {
                    "data": "ExpiryDate", "name": "ExpiryDate",
                    "render": function (data, type, row, meta) {
                        return moment(row.ExpiryDate).format('DD/MMM/YYYY');
                    }
                },
                { "data": "ExecDate", "name": "ExecDate" },
                { "data": "ExecCode", "name": "ExecCode" },
                { "data": "SCode.Code", "name": "SCode.Code" },                
                {
                    "data": "ActiveStatus", "name": "ActiveStatus",
                    "render": function (data, type, row, meta) {
                        if (data == '1') {
                            return '<input type="checkbox" class="editor-active" onclick="return false;" checked>';
                        } else {
                            return '<input type="checkbox" onclick="return false;" class="editor-active">';
                        }
                        return data;
                    }
                },
                { "data": "Description", "name": "Description" },
                { "data": "OperatorID", "name": "OperatorID" },
                {
                    "data": "LastUpdate", "name": "LastUpdate",
                    "render": function (data, type, row, meta) {
                        return moment(row.LastUpdate).format('DD/MMM/YYYY HH:mm:ss');
                    }
                },
                { "data": "VBranch.BranchCode", "name": "VBranch.BranchCode" }
            ]
        });

        function LoadCreateNewForm() {
            document.location = '@Url.Action("Create","GLStandingOrder", new { Area = "GLTransaction" })';
        }

        function LoadEditForm() {
            var form = this;
            var selRow = table.rows('.selected').data();

            if (selRow.length > 0) {
                code = selRow[0]["Code"];
                branch = $('#cboBranchCode').val();
                console.log(code);
                console.log(branch);
                window.location = '@Url.Action("Edit", "GLStandingOrder", new { Area = "GLTransaction" })' + "?code=" + code + "&branchCode=" + branch;
            }
            else {
                alert("Please select data to be edit");
            }
        }

        function Delete() {
            var form = this;
            var selRow = table.rows('.selected').data();

            if (selRow == null || selRow == 'undefined' || selRow.length == 0) {
                alert("Please select the data you want to delete");
                return false;
            }

            var dataCollection = '';
            var dataAcc = '';

            var includePosted = false;

            $.each(selRow, function (index, row) {
                if (Boolean(row["PostedStatus"]) == true) {
                    includePosted = true;
                }
                dataAcc += row["Code"] + ';' + row["VBranch"]["BranchCode"] + '|';
                dataCollection += '[' + row["Code"] + '][' + row["VBranch"]["BranchCode"] + ']' + "\n";
            })

            if (includePosted) {
                alert("One or more selected voucher are posted and can not be delete. Delete process canceled by system.");
                return false;
            }

            var answer = confirm("You are about to delete data:\n" + dataCollection + "\nAre you sure want to delete the data ?");

            if (answer) {
                if (dataCollection.length > 0) {
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("Delete", "GLStandingOrder", new { Area = "GLTransaction" })',
                        data: { "voucherCollection": dataAcc },
                        dataType: 'JSON',
                        success: function (respond) {
                            switch (respond) {
                                case "NoAccess":
                                    window.location.href = '@Server.MapPath("~/Views/Shared/View403.cshtml")'
                                    break;
                                case "Success":
                                    alert(respond);
                                    window.location.href = '@Url.Action("index", "GLStandingOrder", new { Area = "GLTransaction" })'
                                    break;
                                default:
                                    alert(respond);
                                    window.location.href = '@Url.Action("index", "GLStandingOrder", new { Area = "GLTransaction" })'
                                    break;
                            }

                        },
                        error: function (respond, xhr, msg) {
                            alert(msg);
                        }
                    })
                }
            }
            else {
                return false;
            }
        }

        function Refresh() {
            setTimeout(function () {
                table.ajax.reload(null, false);
            }, 1000);
        }

        function GetDateType() {
            var dateType = 0;
            debugger;

            if ($('#chkStartDate').is(':checked') == true) {
                dateType = 1;
            } else if ($('#chkExpiryDate').is(':checked') == true) {
                dateType = 2;
            }
            else {
                dateType = 0;
            }
            return dateType.toString();
        }

    </script>
}
